{{ define "upstream" }}
	#Acces through rancher managed network
	server {{.IP}}:{{.PORT}};
{{ end }}

{{ define "server" }}
{{- $host := .HOST -}}

{{- $http_ports := split (.FIRST.Labels.GetValue "rap.http_listen_ports" "80" ) ","  }}
{{- $https_ports := split (.FIRST.Labels.GetValue "rap.https_listen_ports" "443" ) "," }}

{{- $default_host := or (env "DEFAULT_HOST") "" }}
{{- $default_server := index (dict $host "" $default_host "default_server") $host }}

{{- $proto := .FIRST.Labels.GetValue "rap.proto" "http" | or .PROTO  }}
{{- $https_method := .FIRST.Labels.GetValue "rap.https_method" "noredirect" }}

{{- $vhostCert := (closest (dirList "/etc/nginx/certs") (printf "%s.crt" $host))}}

{{- $vhostCert := trimSuffix $vhostCert ".crt" }}
{{- $vhostCert := trimSuffix $vhostCert ".key" }}

{{- $cert := .FIRST.Labels.GetValue "rap.cert_name" $vhostCert }}

{{- $is_https := (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

{{- if $is_https }}

{{- if eq $https_method "redirect" }} 
server {
	server_name {{ $host }};
	{{- range $port := $http_ports }}
	listen {{$port}} {{ $default_server }};
	{{- end }}
	access_log /var/log/nginx/access.log vhost;
	return 301 https://$host:{{(first $https_ports)}}$request_uri;
}
{{- end}}

server {
	server_name {{ $host }};
	{{- range $port := $https_ports }}
	listen {{$port}} ssl http2 {{ $default_server }};
	{{- end }}
	access_log /var/log/nginx/access.log vhost;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

	ssl_prefer_server_ciphers on;
	ssl_session_timeout 5m;
	ssl_session_cache shared:SSL:50m;
	ssl_session_tickets off;

	ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
	ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

	{{- if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $cert)) }}
	ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $cert }};
	{{- end }}

	{{- if (ne $https_method "noredirect") }}
	add_header Strict-Transport-Security "max-age=31536000";
	{{- end }}

	{{- if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
	include {{ printf "/etc/nginx/vhost.d/%s" $host }};
	{{- else if (exists "/etc/nginx/vhost.d/default") }}
	include /etc/nginx/vhost.d/default;
	{{- end }}

	location / {
		{{- if eq $proto "uwsgi" }}
		include uwsgi_params;
		uwsgi_pass {{ trim $proto }}://{{ trim $host }};
		{{- else }}
		proxy_pass {{ trim $proto }}://{{ trim $host }};
		{{- end }}
		{{- if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
		auth_basic	"Restricted {{ $host }}";
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
		{{- end }}
        	{{- if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
        	include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
        	{{- else if (exists "/etc/nginx/vhost.d/default_location") }}
        	include /etc/nginx/vhost.d/default_location;
        	{{- end }}
	}
}

{{ end -}}


{{- if or (not $is_https) (eq $https_method "noredirect") -}}

server {
	server_name {{ $host }};
	{{- range $port := $http_ports }}
	listen {{$port}}  {{ $default_server }};
	{{- end }}
	access_log /var/log/nginx/access.log vhost;

	{{- if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
	include {{ printf "/etc/nginx/vhost.d/%s" $host }};
	{{- else if (exists "/etc/nginx/vhost.d/default") }}
	include /etc/nginx/vhost.d/default;
	{{- end }}

	location / {
		{{- if eq $proto "uwsgi" }}
		include uwsgi_params;
		uwsgi_pass {{ trim $proto }}://{{ trim $host }};
		{{- else }}
		proxy_pass {{ trim $proto }}://{{ trim $host }};
		{{- end }}
		{{- if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
		auth_basic	"Restricted {{ $host }}";
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
		{{- end }}
        	{{- if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
        	include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
        	{{- else if (exists "/etc/nginx/vhost.d/default_location") }}
        	include /etc/nginx/vhost.d/default_location;
        	{{- end }}
	}
}

{{- if (and (not $is_https) (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}

server {
	server_name {{ $host }};
	{{- range $port := $https_ports }}
	listen {{$port}} ssl http2 {{ $default_server }};
	{{- end }}
	access_log /var/log/nginx/access.log vhost;
	return 500;

	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}
{{- end -}}
{{- end -}}

{{- end -}}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log off;

{{- if (exists "/etc/nginx/proxy.conf") }}
include /etc/nginx/proxy.conf;
{{- else }}

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
{{- end }}

{{- $http_ports_services := services | getAllLabelValue "*" "rap.http_listen_ports" ","}}
{{- $http_ports_stand := host.Containers | getAllLabelValue "" "rap.http_listen_ports" ","}}
{{- $http_ports := concatenateUnique $http_ports_services $http_ports_stand }}

{{- $https_ports_services := services | getAllLabelValue "*" "rap.https_listen_ports" ","}}
{{- $https_ports_stand := host.Containers | getAllLabelValue "" "rap.https_listen_ports" ","}}
{{- $https_ports := concatenateUnique $https_ports_services $https_ports_stand }}

server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	listen 80;
	{{- range $port := $http_ports }}
	{{- if ne $port "80" }}
	listen {{ $port }};
    	{{- end }}
    	{{- end }}
	access_log /var/log/nginx/access.log vhost;
	return 503;
}

{{- if (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	listen 443 ssl http2;
	{{- range $port := $https_ports }}
	{{- if ne $port "443" }}
	listen {{ $port }};
    	{{- end }}
    	{{- end }}
	access_log /var/log/nginx/access.log vhost;
	return 503;

	ssl_session_tickets off;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}
{{- end -}}

{{- $default_port := or (env "DEFAULT_PORT") "80" }}

# Rancher Services config

{{- range $opt, $services := services | groupByMulti "rap.host" ","}}
{{- $parts := split $opt "=>"}}
{{- $host := first $parts | trim }}
{{- $dest := last $parts | trim }}
{{- $destParts := split (when (ne $host $dest) $dest ":") ":" }}
{{- $destProto := first $destParts }}
{{- $destPort := last $destParts }}


upstream {{ $host }} {
{{range $service := $services}}
{{- $addrLen := len $service.Ports }}
{{- range $cont := $service.Containers}}
        {{- if ne $destPort ""}}
            {{- template "upstream" (dict "IP" $cont.Address "PORT" $destPort) }}
        {{- else if .Labels.Exists "rap.port"}}
		    {{- $port := .Labels.GetValue "rap.port" "80" }}
		    {{- template "upstream" (dict "IP" $cont.Address "PORT" $port) }}
        {{- else if eq $addrLen 1 }}
	        {{- $intport := (first $service.Ports).InternalPort }}
	        {{- template "upstream" (dict "IP" $cont.Address "PORT" $intport) }}
	        {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
	    {{- else }}
		     {{- template "upstream" (dict "IP" $cont.Address "PORT" $default_port) }}
	    {{- end }}
{{- end -}}
{{end}} 	server localhost down;
}

{{ template "server" (dict "HOST" $host "FIRST" (first $services)  "PROTO" $destProto) }}

{{- end -}}


# Standalone containers config

{{ range $opt, $conts := host.Containers | groupByMultiFilter "" "rap.host" ","}}
{{- $parts := split $opt "=>"}}
{{- $host := first $parts | trim }}
{{- $dest := last $parts | trim }}
{{- $destParts := split (when (ne $host $dest) $dest ":") ":" }}
{{- $destProto := first $destParts }}
{{- $destPort := last $destParts }}

upstream {{ $host }} {
{{ range $cont := $conts }}
{{- $addrLen := len $cont.Ports }}
        {{- if ne $destPort ""}}
            {{- template "upstream" (dict "IP" $cont.Address "PORT" $destPort) }}
        {{- else if .Labels.Exists "rap.port"}}
		    {{- $port := .Labels.GetValue "rap.port" "80" }}
		    {{- template "upstream" (dict "IP" $cont.Address "PORT" $port) }}
        {{- else if eq $addrLen 1 }}
	        {{- $intport := (first $cont.Ports).InternalPort }}
	        {{- template "upstream" (dict "IP" $cont.Address "PORT" $intport ) }}
	        {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
	    {{- else }}
		     {{- template "upstream" (dict "IP" $cont.Address "PORT" $default_port) }}
	    {{- end }}
{{end}} 	server localhost down;
}

{{ template "server" (dict "HOST" $host "FIRST" (first $conts)  "PROTO" $destProto) }}

{{- end -}}

